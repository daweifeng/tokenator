#!/usr/bin/env python3

import os
import click
from hashlib import blake2b
from hmac import compare_digest
from cryptography.fernet import Fernet
import pyperclip

@click.command()
@click.argument('action')
@click.option('--account')
@click.option('--token')
@click.option('--show', is_flag=True)
def main(action, account, token, show=False):
	if action == 'generate':
		key = generate_key()
		write_key_to_file(key.decode('utf-8'))
		click.echo(key)
	
	if action == 'encrypt':
		key = get_key_from_file().encode()
		
		token: str = encrypt(key, account)
		if show:
			click.echo('Your generated token is: {}'.format(token))
		else:
			copy_to_clipboard(token)
			click.echo("The generated token is saved to your clipboard")


	if action == 'verify':
		key = get_key_from_file().encode()
		original = verify(key, account, token)
		click.echo(original)

def generate_key():
	return Fernet.generate_key()

def get_key_from_file():
	# Get file form the user directory
	user_home = os.path.expanduser('~')
	with open(os.path.join(user_home, '.secret_key'), 'r') as file:
		key = file.readline().strip()
	return key

def write_key_to_file(key):
	# save file to the user directory
	user_home = os.path.expanduser('~')

	with open(os.path.join(user_home, '.secret_key'), 'w') as file:
		file.write(key)
	
def encrypt(key,account):
	h = blake2b(key=key, digest_size=8)
	h.update(account.encode())
	return h.hexdigest()

def verify(key,account, token):
	good_token = encrypt(key, account)
	return compare_digest(token, good_token)

def copy_to_clipboard(token):
	pyperclip.copy(token);

if __name__ == '__main__':
	main()
